import os
import re
import pytesseract
from pdf2image import convert_from_path
from PIL import Image
import xml.etree.ElementTree as ET
from xml.dom import minidom
import pdfplumber  # PDF text okuma
from tkinter import Tk, filedialog

# Eƒüer Windows kullanƒ±yorsan Tesseract yolunu belirt
# pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"

pytesseract.pytesseract.tesseract_cmd = r"C:\Program Files\Tesseract-OCR\tesseract.exe"
a = True

def read_invoice(file_path):
    text = ""

    if file_path.lower().endswith(".pdf"):
        with pdfplumber.open(file_path) as pdf:
            for page in pdf.pages:
                text += page.extract_text() or ""

        if not text.strip():
            print("[!] PDF metin tabanlƒ± deƒüil, OCR uygulanƒ±yor...")
            pages = convert_from_path(file_path)
            for page in pages:
                text += pytesseract.image_to_string(page, lang="tur")
    else:
        text = pytesseract.image_to_string(Image.open(file_path), lang="tur+eng")

    return text


def choose_file():
    root = Tk()
    root.withdraw()  # Tk pencereyi gizle
    file_path = filedialog.askopenfilename(
        title="Bir dosya se√ßin",
        filetypes=[("PDF ve Resimler", "*.pdf;*.png;*.jpg;*.jpeg;*.tiff;*.bmp"), ("T√ºm Dosyalar", "*.*")]
    )
    return file_path

def extract_invoice_data(text):
    """Regex ile fatura verilerini ayƒ±kla"""
    data = {
        "FaturaNo": re.search(r"Seri No:\s*([A-Z0-9]+)", text, re.IGNORECASE),
        "VergiNo": re.search(r"Vergi No:\s*(\d+)", text, re.IGNORECASE),
        "M√ºkellefNo": re.search(r"M√ºkellef No:\s*(\d+)", text, re.IGNORECASE),
        "M√ºkellefAdi": re.search(r"M√ºkellef Adi:\s*(.+)", text, re.IGNORECASE),
        "VergiDairesiNo": re.search(r"Vergi Dairesi No:\s*(\d+)", text, re.IGNORECASE),
        "TicariUnvan": re.search(r"Ticari √únvan:\s*(.+)", text, re.IGNORECASE),
        "Tutar": re.search(r"Fatura Tutari:\s*([\d.,]+)", text, re.IGNORECASE),
    }

    return {k: (v.group(1).strip() if v else "Bulunamadƒ±") for k, v in data.items()}


def prettify_xml(elem):
    """Pretty-print yapar ve gereksiz bo≈ü satƒ±rlarƒ± temizler"""
    rough_string = ET.tostring(elem, encoding='utf-8')
    reparsed = minidom.parseString(rough_string)
    pretty_xml = reparsed.toprettyxml(indent="  ")
    # Bo≈ü satƒ±rlarƒ± temizle
    lines = [line for line in pretty_xml.split('\n') if line.strip()]
    return '\n'.join(lines)


def save_to_xml(data, output_file="efaturalar.xml"):
    """XML‚Äôe yeni fatura ekleyerek kaydeder (pretty-print)"""
    # 1Ô∏è‚É£ Dosya varsa a√ß, yoksa yeni root olu≈ütur
    if os.path.exists(output_file):
        try:
            tree = ET.parse(output_file)
            root = tree.getroot()
            if root.tag == "EInvoice":
                old_invoice = root
                root = ET.Element("Invoices")
                root.append(old_invoice)
        except ET.ParseError:
            # Dosya bozuk veya bo≈üsa yeni root olu≈ütur
            root = ET.Element("Invoices")
    else:
        root = ET.Element("Invoices")

    # 2Ô∏è‚É£ Yeni fatura ekle
    invoice_elem = ET.SubElement(root, "EInvoice")
    for key, value in data.items():
        ET.SubElement(invoice_elem, key).text = value

    # 3Ô∏è‚É£ Pretty-print ve bo≈ü satƒ±r temizleme
    xml_str = ET.tostring(root, encoding='utf-8')
    parsed = minidom.parseString(xml_str)
    lines = [line for line in parsed.toprettyxml(indent="  ").split('\n') if line.strip()]
    pretty_xml = '\n'.join(lines)

    # 4Ô∏è‚É£ Dosyaya kaydet
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(pretty_xml)

    print(f"[+] XML kaydedildi: {output_file}")
    
if __name__ == "__main__":
    while a:
        choice = input("Dosya gezgini i√ßin 1 terminalden se√ßmek i√ßin 2 √ßƒ±kmak i√ßin q giriniz ").strip()
        if choice == 'q':
            print("√áƒ±kƒ±lƒ±yor...")
            break
        elif choice == '1':
            file_path = choose_file()
        elif choice == '2':
            file_path = input("PDF veya resim dosyasƒ±nƒ±n yolunu girin: ")
        else:
            print("Ge√ßersiz se√ßim! L√ºtfen 1, 2 veya q girin.")
            
        if not file_path:
            print("Dosya se√ßilmedi!")
            continue
        elif not os.path.exists(file_path):
            print("Dosya bulunamadƒ±!")
            continue
        elif os.path.isdir(file_path):
            print("HATA: L√ºtfen dosyanƒ±n tam yolunu girin, klas√∂r deƒüil.")
            continue
        else:
            print("[*] Fatura okunuyor...")
            text = read_invoice(file_path)

            print("[*] Bilgiler ayƒ±klanƒ±yor...")
            data = extract_invoice_data(text)

            # üîπ Sabit dosya adƒ± kullan
            output_file = "efaturalar.xml"
            print("[*] XML kaydediliyor...")
            save_to_xml(data, output_file)
        
        continue_choice = input("Ba≈üka bir dosya i≈ülemek ister misiniz? (E/H): ").strip().upper()
        if continue_choice != 'E':
            a = False
            print("√áƒ±kƒ±lƒ±yor...")
        else:
            print("Yeni dosya i√ßin devam ediliyor...")
